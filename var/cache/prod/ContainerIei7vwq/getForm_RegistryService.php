<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'form.registry' shared service.

include_once $this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/FormRegistryInterface.php';
include_once $this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/FormRegistry.php';
include_once $this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/FormExtensionInterface.php';
include_once $this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Extension/DependencyInjection/DependencyInjectionExtension.php';
include_once $this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/ResolvedFormTypeFactoryInterface.php';
include_once $this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/ResolvedFormTypeFactory.php';

return $this->services['form.registry'] = new \Symfony\Component\Form\FormRegistry([0 => new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension(new \Symfony\Component\DependencyInjection\ServiceLocator(['Liip\\ImagineBundle\\Form\\Type\\ImageType' => function () {
    return ${($_ = isset($this->services['liip_imagine.form.type.image']) ? $this->services['liip_imagine.form.type.image'] : ($this->services['liip_imagine.form.type.image'] = new \Liip\ImagineBundle\Form\Type\ImageType())) && false ?: '_'};
}, 'AppBundle\\Form\\ActorType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\ActorType']) ? $this->services['AppBundle\\Form\\ActorType'] : ($this->services['AppBundle\\Form\\ActorType'] = new \AppBundle\Form\ActorType())) && false ?: '_'};
}, 'AppBundle\\Form\\AdsType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\AdsType']) ? $this->services['AppBundle\\Form\\AdsType'] : ($this->services['AppBundle\\Form\\AdsType'] = new \AppBundle\Form\AdsType())) && false ?: '_'};
}, 'AppBundle\\Form\\CategoryType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\CategoryType']) ? $this->services['AppBundle\\Form\\CategoryType'] : ($this->services['AppBundle\\Form\\CategoryType'] = new \AppBundle\Form\CategoryType())) && false ?: '_'};
}, 'AppBundle\\Form\\ChannelEditType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\ChannelEditType']) ? $this->services['AppBundle\\Form\\ChannelEditType'] : ($this->services['AppBundle\\Form\\ChannelEditType'] = new \AppBundle\Form\ChannelEditType())) && false ?: '_'};
}, 'AppBundle\\Form\\ChannelType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\ChannelType']) ? $this->services['AppBundle\\Form\\ChannelType'] : ($this->services['AppBundle\\Form\\ChannelType'] = new \AppBundle\Form\ChannelType())) && false ?: '_'};
}, 'AppBundle\\Form\\CountryType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\CountryType']) ? $this->services['AppBundle\\Form\\CountryType'] : ($this->services['AppBundle\\Form\\CountryType'] = new \AppBundle\Form\CountryType())) && false ?: '_'};
}, 'AppBundle\\Form\\EditEpisodeType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\EditEpisodeType']) ? $this->services['AppBundle\\Form\\EditEpisodeType'] : ($this->services['AppBundle\\Form\\EditEpisodeType'] = new \AppBundle\Form\EditEpisodeType())) && false ?: '_'};
}, 'AppBundle\\Form\\EditMovieType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\EditMovieType']) ? $this->services['AppBundle\\Form\\EditMovieType'] : ($this->services['AppBundle\\Form\\EditMovieType'] = new \AppBundle\Form\EditMovieType())) && false ?: '_'};
}, 'AppBundle\\Form\\EditSerieType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\EditSerieType']) ? $this->services['AppBundle\\Form\\EditSerieType'] : ($this->services['AppBundle\\Form\\EditSerieType'] = new \AppBundle\Form\EditSerieType())) && false ?: '_'};
}, 'AppBundle\\Form\\EpisodeType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\EpisodeType']) ? $this->services['AppBundle\\Form\\EpisodeType'] : ($this->services['AppBundle\\Form\\EpisodeType'] = new \AppBundle\Form\EpisodeType())) && false ?: '_'};
}, 'AppBundle\\Form\\FaqType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\FaqType']) ? $this->services['AppBundle\\Form\\FaqType'] : ($this->services['AppBundle\\Form\\FaqType'] = new \AppBundle\Form\FaqType())) && false ?: '_'};
}, 'AppBundle\\Form\\GenreType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\GenreType']) ? $this->services['AppBundle\\Form\\GenreType'] : ($this->services['AppBundle\\Form\\GenreType'] = new \AppBundle\Form\GenreType())) && false ?: '_'};
}, 'AppBundle\\Form\\LanguageType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\LanguageType']) ? $this->services['AppBundle\\Form\\LanguageType'] : ($this->services['AppBundle\\Form\\LanguageType'] = new \AppBundle\Form\LanguageType())) && false ?: '_'};
}, 'AppBundle\\Form\\MovieType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\MovieType']) ? $this->services['AppBundle\\Form\\MovieType'] : ($this->services['AppBundle\\Form\\MovieType'] = new \AppBundle\Form\MovieType())) && false ?: '_'};
}, 'AppBundle\\Form\\PackType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\PackType']) ? $this->services['AppBundle\\Form\\PackType'] : ($this->services['AppBundle\\Form\\PackType'] = new \AppBundle\Form\PackType())) && false ?: '_'};
}, 'AppBundle\\Form\\PaymentType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\PaymentType']) ? $this->services['AppBundle\\Form\\PaymentType'] : ($this->services['AppBundle\\Form\\PaymentType'] = new \AppBundle\Form\PaymentType())) && false ?: '_'};
}, 'AppBundle\\Form\\PolicyType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\PolicyType']) ? $this->services['AppBundle\\Form\\PolicyType'] : ($this->services['AppBundle\\Form\\PolicyType'] = new \AppBundle\Form\PolicyType())) && false ?: '_'};
}, 'AppBundle\\Form\\RefundType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\RefundType']) ? $this->services['AppBundle\\Form\\RefundType'] : ($this->services['AppBundle\\Form\\RefundType'] = new \AppBundle\Form\RefundType())) && false ?: '_'};
}, 'AppBundle\\Form\\RoleType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\RoleType']) ? $this->services['AppBundle\\Form\\RoleType'] : ($this->services['AppBundle\\Form\\RoleType'] = new \AppBundle\Form\RoleType())) && false ?: '_'};
}, 'AppBundle\\Form\\SeasonType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\SeasonType']) ? $this->services['AppBundle\\Form\\SeasonType'] : ($this->services['AppBundle\\Form\\SeasonType'] = new \AppBundle\Form\SeasonType())) && false ?: '_'};
}, 'AppBundle\\Form\\SerieType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\SerieType']) ? $this->services['AppBundle\\Form\\SerieType'] : ($this->services['AppBundle\\Form\\SerieType'] = new \AppBundle\Form\SerieType())) && false ?: '_'};
}, 'AppBundle\\Form\\SettingsType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\SettingsType']) ? $this->services['AppBundle\\Form\\SettingsType'] : ($this->services['AppBundle\\Form\\SettingsType'] = new \AppBundle\Form\SettingsType())) && false ?: '_'};
}, 'AppBundle\\Form\\SlideType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\SlideType']) ? $this->services['AppBundle\\Form\\SlideType'] : ($this->services['AppBundle\\Form\\SlideType'] = new \AppBundle\Form\SlideType())) && false ?: '_'};
}, 'AppBundle\\Form\\SourceTrailerType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\SourceTrailerType']) ? $this->services['AppBundle\\Form\\SourceTrailerType'] : ($this->services['AppBundle\\Form\\SourceTrailerType'] = new \AppBundle\Form\SourceTrailerType())) && false ?: '_'};
}, 'AppBundle\\Form\\SourceType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\SourceType']) ? $this->services['AppBundle\\Form\\SourceType'] : ($this->services['AppBundle\\Form\\SourceType'] = new \AppBundle\Form\SourceType())) && false ?: '_'};
}, 'AppBundle\\Form\\SubscriptionType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\SubscriptionType']) ? $this->services['AppBundle\\Form\\SubscriptionType'] : ($this->services['AppBundle\\Form\\SubscriptionType'] = new \AppBundle\Form\SubscriptionType())) && false ?: '_'};
}, 'AppBundle\\Form\\SubtitleType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\SubtitleType']) ? $this->services['AppBundle\\Form\\SubtitleType'] : ($this->services['AppBundle\\Form\\SubtitleType'] = new \AppBundle\Form\SubtitleType())) && false ?: '_'};
}, 'AppBundle\\Form\\TrailerType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\TrailerType']) ? $this->services['AppBundle\\Form\\TrailerType'] : ($this->services['AppBundle\\Form\\TrailerType'] = new \AppBundle\Form\TrailerType())) && false ?: '_'};
}, 'AppBundle\\Form\\VersionType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\VersionType']) ? $this->services['AppBundle\\Form\\VersionType'] : ($this->services['AppBundle\\Form\\VersionType'] = new \AppBundle\Form\VersionType())) && false ?: '_'};
}, 'AppBundle\\Form\\WebAdsType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\WebAdsType']) ? $this->services['AppBundle\\Form\\WebAdsType'] : ($this->services['AppBundle\\Form\\WebAdsType'] = new \AppBundle\Form\WebAdsType())) && false ?: '_'};
}, 'AppBundle\\Form\\WebSettingsType' => function () {
    return ${($_ = isset($this->services['AppBundle\\Form\\WebSettingsType']) ? $this->services['AppBundle\\Form\\WebSettingsType'] : ($this->services['AppBundle\\Form\\WebSettingsType'] = new \AppBundle\Form\WebSettingsType())) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\ChangePasswordFormType' => function () {
    return ${($_ = isset($this->services['fos_user.change_password.form.type']) ? $this->services['fos_user.change_password.form.type'] : ($this->services['fos_user.change_password.form.type'] = new \FOS\UserBundle\Form\Type\ChangePasswordFormType('UserBundle\\Entity\\User'))) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\ProfileFormType' => function () {
    return ${($_ = isset($this->services['fos_user.profile.form.type']) ? $this->services['fos_user.profile.form.type'] : ($this->services['fos_user.profile.form.type'] = new \FOS\UserBundle\Form\Type\ProfileFormType('UserBundle\\Entity\\User'))) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\RegistrationFormType' => function () {
    return ${($_ = isset($this->services['fos_user.registration.form.type']) ? $this->services['fos_user.registration.form.type'] : ($this->services['fos_user.registration.form.type'] = new \FOS\UserBundle\Form\Type\RegistrationFormType('UserBundle\\Entity\\User'))) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\ResettingFormType' => function () {
    return ${($_ = isset($this->services['fos_user.resetting.form.type']) ? $this->services['fos_user.resetting.form.type'] : ($this->services['fos_user.resetting.form.type'] = new \FOS\UserBundle\Form\Type\ResettingFormType('UserBundle\\Entity\\User'))) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\UsernameFormType' => function () {
    return ${($_ = isset($this->services['fos_user.username_form_type']) ? $this->services['fos_user.username_form_type'] : $this->load('getFosUser_UsernameFormTypeService.php')) && false ?: '_'};
}, 'Ivory\\CKEditorBundle\\Form\\Type\\CKEditorType' => function () {
    return ${($_ = isset($this->services['ivory_ck_editor.form.type']) ? $this->services['ivory_ck_editor.form.type'] : $this->load('getIvoryCkEditor_Form_TypeService.php')) && false ?: '_'};
}, 'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => function () {
    return ${($_ = isset($this->services['form.type.entity']) ? $this->services['form.type.entity'] : $this->load('getForm_Type_EntityService.php')) && false ?: '_'};
}, 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => function () {
    return ${($_ = isset($this->services['form.type.choice']) ? $this->services['form.type.choice'] : $this->load('getForm_Type_ChoiceService.php')) && false ?: '_'};
}, 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType' => function () {
    return ${($_ = isset($this->services['form.type.file']) ? $this->services['form.type.file'] : $this->load('getForm_Type_FileService.php')) && false ?: '_'};
}, 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => function () {
    return ${($_ = isset($this->services['form.type.form']) ? $this->services['form.type.form'] : $this->load('getForm_Type_FormService.php')) && false ?: '_'};
}]), ['Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_extension.form.transformation_failure_handling']) ? $this->services['form.type_extension.form.transformation_failure_handling'] : $this->load('getForm_TypeExtension_Form_TransformationFailureHandlingService.php')) && false ?: '_'};
    yield 1 => ${($_ = isset($this->services['form.type_extension.form.http_foundation']) ? $this->services['form.type_extension.form.http_foundation'] : $this->load('getForm_TypeExtension_Form_HttpFoundationService.php')) && false ?: '_'};
    yield 2 => ${($_ = isset($this->services['form.type_extension.form.validator']) ? $this->services['form.type_extension.form.validator'] : $this->load('getForm_TypeExtension_Form_ValidatorService.php')) && false ?: '_'};
    yield 3 => ${($_ = isset($this->services['form.type_extension.upload.validator']) ? $this->services['form.type_extension.upload.validator'] : $this->load('getForm_TypeExtension_Upload_ValidatorService.php')) && false ?: '_'};
    yield 4 => ${($_ = isset($this->services['form.type_extension.csrf']) ? $this->services['form.type_extension.csrf'] : $this->load('getForm_TypeExtension_CsrfService.php')) && false ?: '_'};
}, 5), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType' => new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_extension.repeated.validator']) ? $this->services['form.type_extension.repeated.validator'] : ($this->services['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension())) && false ?: '_'};
}, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType' => new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_extension.submit.validator']) ? $this->services['form.type_extension.submit.validator'] : ($this->services['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension())) && false ?: '_'};
}, 1)], new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_guesser.validator']) ? $this->services['form.type_guesser.validator'] : $this->load('getForm_TypeGuesser_ValidatorService.php')) && false ?: '_'};
    yield 1 => ${($_ = isset($this->services['form.type_guesser.doctrine']) ? $this->services['form.type_guesser.doctrine'] : $this->load('getForm_TypeGuesser_DoctrineService.php')) && false ?: '_'};
}, 2), NULL)], ${($_ = isset($this->services['form.resolved_type_factory']) ? $this->services['form.resolved_type_factory'] : ($this->services['form.resolved_type_factory'] = new \Symfony\Component\Form\ResolvedFormTypeFactory())) && false ?: '_'});
